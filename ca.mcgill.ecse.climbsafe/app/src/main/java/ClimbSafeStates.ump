class Assignment {
	 assignmentStatus{
       Assigned {
         payAssignment(String authorizationCode) [isBanned()] /{rejectBanPaid();} -> Assigned; //banned reject dont need to check authorization code because is banned error has higher priority I assume
         payAssignment(String authorizationCode) [!isCorrectCode(authorizationCode) && !isBanned()] /{rejectPayAssignment();}->Assigned;
         payAssignment(String authorizationCode) [isCorrectCode(authorizationCode) && !isBanned()] /{doPayAssignment(authorizationCode);}->Paid;
         
         cancelAssignment() [isBanned()] /{rejectCancelBanned();} -> Assigned;
         cancelAssignment() [!isBanned()] -> Cancelled;
 
         startAssignment() [isBanned()] /{rejectStartBanned();} -> Assigned;
         startAssignment() [!isBanned()] /{banMember();} -> Assigned; //if the climb starts but the member did not pay
         
         finishAssignment() [isBanned()] /{rejectFinishBanned();} -> Assigned;
         finishAssignment() [!isBanned()] / {rejectFinished();} -> Assigned;
       }
       
       Paid {
         startAssignment() -> Started; 
         
	 	 payAssignment(String authorizationCode) /{alreadyPaid();
         }->Paid;
         
         cancelAssignment() / {refund(50);} -> Cancelled;
         
         finishAssignment() / {rejectFinished();} -> Paid;
       }
       
       Started {
         finishAssignment() -> Finished;
         
         payAssignment(String authorizationCode) /{alreadyPaid();} -> Started;
        
         finishAssignment()->/{rejectEnd();} Started;
         
         cancelAssignment() ->/{refund(10);} Cancelled;
       }
       Cancelled {
         payAssignment(String authorizationCode) /{rejectPayCancelled();} -> Cancelled;
         finishAssignment() /{rejectFinishCancelled();} -> Cancelled;
         startAssignment() /{rejectStartCancelled();} -> Cancelled;
       }
       
       Finished {
        payAssignment(String authorizationCode)-> /{rejectPayFinished();}Finished;
        startAssignment()-> /{rejectStartFinished();}Finished;
        cancelAssignment()-> /{rejectCancelFinished(); refund(0);}Finished;
         //end -> Final
       }
       	    
	 }
	 
	 private Boolean isCorrectCode(String authorizationCode) {
	 	return !authorizationCode.equals("");
	 }
	 
	 private void rejectPayAssignment() {
	 	throw new RuntimeException("Invalid authorization code");
	 }
	 
	 private void alreadyPaid() {
	 	throw new RuntimeException("Trip has already been paid for");
	 }
	 private void rejectBanPaid() {
	 	throw new RuntimeException("Cannot pay for the trip due to a ban");
	 }
	 
	 private void rejectCancelBanned() {
	 	throw new RuntimeException("Cannot cancel the trip due to a ban");
	 }
	 
	 private void rejectStartBanned() {
	 	throw new RuntimeException("Cannot start the trip due to a ban");
	 }
	 private void rejectFinishBanned() {
	 	throw new RuntimeException("Cannot finish the trip due to a ban");
	 }	 
	 
	 private void rejectFinished(){
	 	throw new RuntimeException("Cannot finish a trip which has not started");
  	 }
  	 
  	 private void rejectPayCancelled() {
  	 	throw new RuntimeException("Cannot pay for a trip which has been cancelled");
  	 }
  	 
  	 private void rejectStartCancelled() {
  	 	throw new RuntimeException("Cannot start a trip which has been cancelled");
  	 }
  	 
  	 private void rejectFinishCancelled() {
  	 	throw new RuntimeException("Cannot finish a trip which has been cancelled");
  	 }
  	 
  	 private void rejectPayFinished() {
  	 	throw new RuntimeException("Cannot pay for a trip which has finished");
  	 }
  	 
  	 private void rejectStartFinished() {
  	 	throw new RuntimeException("Cannot start a trip which has finished");
  	 }
  	 
  	 private void rejectCancelFinished() {
  	 	throw new RuntimeException("Cannot cancel a trip which has finished");
  	 }
  	 
	 private void doPayAssignment(String authorizationCode) {
	 	this.authorizationCode = authorizationCode;
	 }
	 
	 
	 private void banMember() {
	 	this.member.setBanStatus(BanStatus.Banned);
	 }
    private boolean isBanned() {
	 	return(this.member.getBanStatus() == BanStatus.Banned);
	 }
    
    /*
    private int totalCost(){
        ClimbSafe cs= ClimbSafeApplication.getClimbSafe();
        int sum=0;
        for (BookedItem item : this.member.getBookedItems()) {
				// if it is a bundle, compute bundle cost
				if (item.getItem() instanceof EquipmentBundle) {
					double bundleCost = 0;
					EquipmentBundle equipmentBundle = (EquipmentBundle) item.getItem();
					for (BundleItem bI : equipmentBundle.getBundleItems()) {
						Equipment e = bI.getEquipment();
						bundleCost += e.getPricePerWeek() * bI.getQuantity();
					}
					if (this.member.getGuideRequired()) {
						bundleCost = bundleCost * (100.0 - equipmentBundle.getDiscount()) /100.0;
					}
					sum += bundleCost * item.getQuantity();

				} else if (item.getItem() instanceof Equipment) {
					Equipment e = (Equipment) item.getItem();
					sum += e.getPricePerWeek() * item.getQuantity();
				}
                 
        }
        if (this.member.getGuideRequired()){
          sum+=cs.getPriceOfGuidePerWeek();
        }
        
        sum*=this.endWeek-this.startWeek;//sum is weekly sum until multiplied by number of weeks
        return sum;
     } */
     
	 private void refund(int percentage) {
      // int refund= (int)((100-percentage) *totalCost)/100;
       this.refundPercentage=percentage;
	 }
  	 
  	 private void rejectStart(){
	 	throw new RuntimeException("The start was unsuccesful");
  	 }
  	 
  	 private void rejectCancel(){
	 	throw new RuntimeException("The assignment was already cancelled");
  	 }
  	 
  	 
}