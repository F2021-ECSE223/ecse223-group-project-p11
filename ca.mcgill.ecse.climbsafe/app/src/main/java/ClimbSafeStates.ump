namespace ca.mcgill.ecse.climbsafe.model;

class Member {
    BanStatus {
        NotBanned {
            toggleBanStatus() -> Banned;
            assign(int startWeek, int endWeek) / {
                doAssign(startWeek, endWeek);
            } -> NotBanned;
        }
        Banned {
            toggleBanStatus() -> NotBanned;
            assign(int startWeek, int endWeek) / { 
                rejectAssign(startWeek, endWeek); 
            } -> Banned;
        }
    }

    private void doAssign(int startWeek, int endWeek) {
        Assignment assignment = this.getAssignment();
        if (assignment == null) {
            getClimbSafe().addAssignment(startWeek, endWeek, this);
        }
        else {
          assignment.setStartWeek(startWeek);
          assignment.setEndWeek(endWeek);
          
        }
    }

    private void rejectAssign(int startWeek, int endWeek, this) {
        throw new RuntimeException("A banned member cannot be assigned a climbing session");
    }
}


class Assignment {
	 assignmentStatus{
       Assigned {
         togglePaidStatus -> Paid;
         toggleCanceledStatus -> Cancelled;
       }
       Paid {
         toggleStartedStatus -> Started; 
         toggleCanceledStatus -> Cancelled;
       }
       Started {
         toggleFinishedStatus -> Finished;
       }
       Cancelled {
         toggleCanceledStatus -> Cancelled;
       }
       
       Finished {
         
       }	    
	 }
	 
	  private void doAssign(?) {
	  	for (Member member: this.climbsafe.getMembers() {
		  	if (member.isGuideRequired()) {
		      	for (Guide guide : this.climbsafe.getGuides()) {
		      	Assignment lastAssignment;
		      	int lastweekassigned = 0;
		      		for (Assignment ass: guide.getAssignments()) {
		      			if (lastweekAssgined < ass.getEndWeek) {
		      				lastWeekAssigned = ass.getEndWeek);
		      				lastAssignment = ass;
		      			}
		      		}
		      	if (lastAssignment.getEndWeek() + 1 + member.getNrWeeks() < this.climbsafe.getNrWeeks() {
		      		// assign guide member
		      	}
		    } else {
		    	this.setStartWeek(1);
		    	this.setEndWeek(1 + member.getNrWeeks();
		   }
     	}
    }

    private void rejectAssign(int startWeek, int endWeek, this) {
        throw new RuntimeException("A banned member cannot be assigned a climbing session");
    }
}